name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:
    inputs: 
        environment:
            description: 'Deployment Environment'
            required: true
            default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display current directory
        run: |
          pwd
          ls -al
          
      - name: Build
        run: |
          npm install
          

  unit-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.16.1
          cache: "npm"

      - name: Install dependencies and run tests
        run: |
          npm install
          npm install -g pm2
          # npm test

  create-deployment-artefacts:
   
    name: Create deployment artefacts
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v2

      - name: Create deployment artefact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artefact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  prepare-release-on-servers:
    runs-on: ubuntu-latest
    needs: create-deployment-artefacts

    steps:
      - name: Download deployment artefact
        uses: actions/download-artifact@v2
        with:
          name: app-build

      - name: Create artifact directory
        run: mkdir -p artifact
          
      - name: Extract files
        run: tar -xzf ${{ github.sha }}.tar.gz -C .

      - name: Drop zip and tar files
        run: rm ${{ github.sha }}.tar.gz
  
      - name: Copy file via SSH private key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          # username: ${{ secrets.SSH_USER_PROD }}
          username: ${{ secrets.SSH_USER_PROD }}
          password: ${{ secrets.SSH_PASSWORD_PROD }}
          # key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: .
          target: ${{ secrets.SSH_PATH_PROD }}
          overwrite: true
          debug: true
          
      - name: SSH into the server and restart PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          username: ${{ secrets.SSH_USER_PROD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ${{ secrets.SSH_PATH_PROD }}
            pm2 reload app
            pm2 show app
